Feb 25 2020

I decided to start over with a virtual machine instead of the physical
server
I have loaded up virtualbox and installed hyper-v 2019
I still have to connect the VM up with hyper-v manager
and add a bunch more virtual disks
before i can finally start using it to try creating vdisks and pools
with variable column numbers specified

I made a 250 gig vdi for the boot drive
then 5x500gig for the storage devices
I went thorugh using the same two lines 

$DiskToChange = Get-PhysicalDisk -SerialNumber VBxxxxxxx
Set-PhysicalDisk -InputObject $DiskToChange -NewFriendlyName "idx"

to set the "friendly name" to the id number of each disk, 1 - 5

I then set out to try and enable RDP so make it easier to copy/paste from window to window 

February 29th 2020

I installed WAC on the alienware but I couldn't seem to connect with it
then I realized my "keith" account was using a different password that I expected
So I'll have to udpate that and re-do the autologin and also update the custom 
unattend.xml file 
I have enabled the vbox extensions and installed "guest additions" in the windows OS in an attempt
to be able to copy/paste back and forth. Not sure it's worked. RDP will fix that.
To my surprise I was able to bring up the C$ share without any problems

I think this ISO I'm using is the previous version of Hyper-V 2019
as it still has the apparent RDP bug that makes it more difficult to connect
according to the site
https://wiki.chotaire.net/windows-hyperv-2019-fix-rdp
this is a bug that was fixed in the july 2019 release of hyper-v 2019
but the patch to fix the issue is also linked:
windows10.0-kb4493509-x64_ec069505eddfb9175e376b7eea773182d06033f0.msu
found at 
http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/04/windows10.0-kb4493509-x64_ec069505eddfb9175e376b7eea773182d06033f0.msu

per the site, I ran the command
Wusa windows10.0-kb4493509-x64_ec069505eddfb9175e376b7eea773182d06033f0.msu
and it apparently installed successfully and I rebooted when prompted

I then ran the next command in the article.
I have actually been running everything via PS for the shell history
so I made one minor modifiection of cmd /c 
enable RDP:
cmd / c cscript %windir%\system32\scregedit.wsf /ar 0

verify RDP setting:
cmd /c cscript %windir%\system32\scregedit.wsf /ar /v

(it didn't work without the cmd /c part)

next i wanted to reset the password but maintain autologon
I used the 
net user command to update:
net user keith (pw here) /expires:never
to set a new pw
The unattend.xml I used specified the pw and it says plaintext=true
but when I searched the registry for that string nothing came back 
so I'm not sure where that pw is stored 
but I know autologon can be setup with user name and pw in registry location
Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
So I am going to create a DefaultPassword (string) entry there and hope for the best
And the command also sets the pw to never expire. Finally. 
AutoAdminLogon is already there and present so hypothetically this should just work 

note that the 
net user
command also has a /workstations option
if you use it with an * it's supposed to allow login from any PC:
/WORKSTATIONS:{computername[,...] | *}
                              Lists as many as eight computers from
                              which a user can log on to the network. If
                              /WORKSTATIONS has no list or if the list is *,
                              the user can log on from any computer.
                    
So I ran this:
net user keith /workstations:*
I'm hoping this helps

--------------------------------------
I did all that just so I could RDP, access the C$ and use server manager maybe
the whole reason I wanted to this in the first place was to create disk arrays
with a specified column count, which I can now start on

although for some reason my hard drives have reverted back to their default friendly names
so I guess I have to re-name them all 

If I have to do it again at least I have this:

Set-PhysicalDisk -InputObject (Get-PhysicalDisk -SerialNumber VB1f7d7aad-889261df)  -NewFriendlyName "id3"
Set-PhysicalDisk -InputObject (Get-PhysicalDisk -SerialNumber VBdb4e217a-a367536f)  -NewFriendlyName "id1"
Set-PhysicalDisk -InputObject (Get-PhysicalDisk -SerialNumber VB1dd1e317-9d175508)  -NewFriendlyName "id4"
Set-PhysicalDisk -InputObject (Get-PhysicalDisk -SerialNumber VB9089947d-d5727b8c)  -NewFriendlyName "id5"
Set-PhysicalDisk -InputObject (Get-PhysicalDisk -SerialNumber VB1118b041-71afb5a2)  -NewFriendlyName "id2"
Set-PhysicalDisk -InputObject (Get-PhysicalDisk -SerialNumber VBcb07b5b2-105ed63a)  -NewFriendlyName "os drive"

from my prior set of notes, I want to first create a pool then from this pool create a vdisk 
the vdisk command being where I would specify the number of columns

just to remind myself, this command will return the drives that can be used to create a pool 
though in this case it's all of them except the C: drive

Get-PhysicalDisk | where {$_.canpool -eq $true}
although this does the same thing making me wonder what the point of the above is exactly:
 Get-PhysicalDisk -CanPool $true

I think I have to at least see what the name of the storage subsystem is first:
Windows Storage on HyperV2k19-VBox
seems unnecesarily long to me but as it has the the string "windows storage" in it I think my prior command will still work 

I'm going to modify the command from the prior set of notes to create a new pool 
i thought i could do something simpler but I guess I didn't read my notes carefully enough
so I will use a variable to hold the disks I want in the pool:

$PhysicalDisks = Get-StorageSubSystem -FriendlyName "Windows Storage*" | Get-PhysicalDisk -CanPool $True 

then create the command utilizing the variable:

New-StoragePool -FriendlyName "WinStorePool" -StorageSubsystemFriendlyName "Windows Storage*" -PhysicalDisks $PhysicalDisks 

the combination of those two commands DID successfully create the new storage pool

Next I have to create the vdisk and this I think is where I need to specify the number of columns
I want to create a "simple" volume, not thin for performance advantages
and have at least one drive worth of redundancy
so I think what I want is to create a vdisk of the 5 drives with a column count of 4
so that 5th disk will be apart of the array but not be used to store data 
the theory being if one of the four disks fail that fifth disk will take its place without missing a beat

So:
New-VirtualDisk -StoragePoolFriendlyName "WinStorePool" -FriendlyName VDisk1 -NumberOfColumns 4 -ProvisioningType Fixed -ResiliencySettingName Simple -UseMaximumSize


New-VirtualDisk StoragePoolFriendlyName "WinStorePool" FriendlyName VDisk1 NumberOfColumns 4 ProvisioningType Fixed ResiliencySettingName Simple -UseMaximumSize
New-VirtualDisk FriendlyName VDisk1 NumberOfColumns 4 ProvisioningType Fixed ResiliencySettingName Simple -UseMaximumSize

|New-VirtualDisk -FriendlyName "UserData" -Size 100GB -ProvisioningType Thin |Initialize-Disk -PassThru |New-Partition -AssignDriveLetter -UseMaximumSize |Format-Volume

